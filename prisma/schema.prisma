generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Existing models
model Coach {
  id           String    @id @default(cuid())
  name         String
  specialty    String
  bio          String
  imageUrl     String?
  availability String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
}

model Booking {
  id        String   @id @default(cuid())
  coach     Coach    @relation(fields: [coachId], references: [id])
  coachId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  dateTime  DateTime
  status    String   // "scheduled", "completed", "cancelled"
  createdAt DateTime @default(now())
}

// New models
model User {
  id              String         @id @default(cuid())
  email           String        @unique
  name            String?
  role            String        @default("user") // "user", "admin", "coach"
  subscriptionTier String       @default("free") // "free", "basic", "premium"
  bookings        Booking[]
  progress        Progress[]
  aiChats         AIChat[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text  // For RAG
  type        String   // "pdf", "doc", "youtube", "text"
  sourceUrl   String?  // For YouTube URLs or original file links
  addedBy     String   // Admin user ID
  isActive    Boolean  @default(true)
  usedInChats AIChat[] @relation("ChatKnowledge") // Add relation name
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resource {
  id           String     @id @default(cuid())
  title        String
  description  String
  type         String     // 'course', 'guide', 'template', 'text'
  content      String?    @db.Text  // For storing text content
  status       String     @default("draft") // 'draft', 'published'
  progress     Progress[] // Add this line to complete the relation
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Progress {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String
  status     String   // "not_started", "in_progress", "completed"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, resourceId])
}

model AIChat {
  id           String         @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  query        String        @db.Text
  response     String        @db.Text
  sources      String[]      // References to KnowledgeBase entries used
  knowledgeUsed KnowledgeBase[] @relation("ChatKnowledge") // Add this line
  createdAt    DateTime      @default(now())
}