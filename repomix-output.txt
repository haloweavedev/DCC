This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-01T16:42:20.107Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
app/
  coaches/
    [slug]/
      page.tsx
    page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    avatar.tsx
    button.tsx
    card.tsx
    dialog.tsx
    input.tsx
    navigation-menu.tsx
    select.tsx
lib/
  utils.ts
prisma/
  schema.prisma
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
types/
  index.ts
.gitignore
components.json
Dental-Coaching-Collective-TXT.txt
eslint.config.mjs
middleware.ts
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: app/coaches/[slug]/page.tsx
================
// app/coaches/[slug]/page.tsx
"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Coach } from "@/types";

const coachDetails: Coach = {
  id: 1,
  name: "Dr. Sarah Johnson",
  specialty: "Practice Management",
  bio: "15+ years experience helping dental practices optimize their operations and growth strategies.",
  imageUrl: "/coaches/sarah.jpg",
  expertise: ["Team Building", "Financial Planning", "Patient Experience"],
  rating: 4.9,
  totalSessions: 234,
  about: "Dr. Sarah Johnson is a recognized expert in dental practice management with over 15 years of experience. She has helped transform more than 200 dental practices across the country, focusing on operational efficiency, team development, and sustainable growth strategies.",
  approach: "My coaching approach combines data-driven analysis with practical, implementable solutions. I believe in creating customized strategies that align with each practices unique goals and challenges.",
  availability: [
    "Monday: 9 AM - 5 PM EST",
    "Wednesday: 10 AM - 6 PM EST",
    "Friday: 9 AM - 3 PM EST"
  ],
  testimonials: [
    {
      text: "Dr. Johnsons guidance helped us increase our practice revenue by 40% in just one year!",
      author: "Dr. Mark Wilson",
      role: "Practice Owner, Seattle"
    },
    {
      text: "The team building strategies we learned transformed our office culture completely.",
      author: "Dr. Lisa Chen",
      role: "Practice Owner, Chicago"
    }
  ]
};

export default function CoachProfile() {
  return (
    <div className="min-h-screen bg-gray-50 pt-20">
      <div className="container mx-auto px-4 py-8">
        {/* Profile Header */}
        <div className="bg-white rounded-lg p-6 shadow-sm mb-8">
          <div className="flex flex-col md:flex-row gap-6 items-start">
            <Avatar className="h-32 w-32">
              <AvatarImage src={coachDetails.imageUrl} alt={coachDetails.name} />
              <AvatarFallback>{coachDetails.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <h1 className="text-3xl font-bold mb-2">{coachDetails.name}</h1>
              <p className="text-lg text-gray-600 mb-4">{coachDetails.specialty}</p>
              <div className="flex flex-wrap gap-2 mb-4">
                {coachDetails.expertise.map((skill) => (
                  <span
                    key={skill}
                    className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full"
                  >
                    {skill}
                  </span>
                ))}
              </div>
              <div className="flex items-center gap-4">
                <span className="text-lg">‚≠ê {coachDetails.rating}</span>
                <span className="text-lg">{coachDetails.totalSessions} sessions</span>
              </div>
            </div>
            <Dialog>
              <DialogTrigger asChild>
                <Button size="lg" className="w-full md:w-auto">
                  Schedule Coaching Session
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                  <DialogTitle>Schedule with {coachDetails.name}</DialogTitle>
                  <DialogDescription>
                    Choose a time that works best for you.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div className="grid gap-2">
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Select time slot" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="slot1">Tomorrow 10:00 AM</SelectItem>
                        <SelectItem value="slot2">Tomorrow 2:00 PM</SelectItem>
                        <SelectItem value="slot3">Friday 11:00 AM</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <Button onClick={() => alert("Booking confirmed! (Demo)")}>
                    Confirm Booking
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Main Content */}
        <div className="grid md:grid-cols-3 gap-8">
          {/* Left Column - About & Approach */}
          <div className="md:col-span-2 space-y-8">
            <Card>
              <CardContent className="pt-6">
                <h2 className="text-2xl font-semibold mb-4">About</h2>
                <p className="text-gray-600">{coachDetails.about}</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="pt-6">
                <h2 className="text-2xl font-semibold mb-4">Coaching Approach</h2>
                <p className="text-gray-600">{coachDetails.approach}</p>
              </CardContent>
            </Card>

            {/* Testimonials */}
            <Card>
              <CardContent className="pt-6">
                <h2 className="text-2xl font-semibold mb-4">Client Testimonials</h2>
                <div className="space-y-6">
                {coachDetails.testimonials?.map((testimonial, index) => (
                    <div key={index} className="border-l-4 border-blue-500 pl-4 py-2">
                      <p className="text-gray-600 italic mb-2">&quot;{testimonial.text}&quot;</p>
                      <p className="text-sm font-semibold">{testimonial.author}</p>
                      <p className="text-sm text-gray-500">{testimonial.role}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right Column - Availability & Booking */}
          <div className="space-y-8">
            <Card>
              <CardContent className="pt-6">
                <h2 className="text-2xl font-semibold mb-4">Availability</h2>
                <ul className="space-y-2">
                {coachDetails.availability?.map((slot, index) => (
                    <li key={index} className="text-gray-600">{slot}</li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/coaches/page.tsx
================
"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Coach } from "@/types";
import Link from "next/link";
import { useState } from "react";

// Dummy coach data
const coaches = [
  {
    id: 1,
    name: "Dr. Sarah Johnson",
    specialty: "Practice Management",
    bio: "15+ years experience helping dental practices optimize their operations and growth strategies.",
    imageUrl: "/coaches/sarah.jpg",
    expertise: ["Team Building", "Financial Planning", "Patient Experience"],
    rating: 4.9,
    totalSessions: 234
  },
  {
    id: 2,
    name: "Dr. Michael Chen",
    specialty: "Front Office Excellence",
    bio: "Expert in modernizing front office operations and implementing efficient systems.",
    imageUrl: "/coaches/michael.jpg",
    expertise: ["Patient Communication", "Scheduling Optimization", "Technology Integration"],
    rating: 4.8,
    totalSessions: 189
  },
  {
    id: 3,
    name: "Dr. Alicia Gomez",
    specialty: "Practice Management",
    bio: "Former private practice owner who now specializes in guiding new dentists through startup challenges.",
    imageUrl: "/coaches/alicia.jpg",
    expertise: ["Branding", "Hiring & Onboarding", "Software Selection"],
    rating: 4.7,
    totalSessions: 150
  },
  {
    id: 4,
    name: "Dr. Ben Thompson",
    specialty: "Front Office Excellence",
    bio: "Known for transforming chaotic front offices into well-oiled machines, improving patient satisfaction.",
    imageUrl: "/coaches/ben.jpg",
    expertise: ["Phone Etiquette", "Appointment Flow", "Insurance Verification"],
    rating: 4.6,
    totalSessions: 212
  },
  {
    id: 5,
    name: "Dr. Priya Patel",
    specialty: "Practice Management",
    bio: "Helps clinics scale by analyzing key KPIs and implementing effective systems for sustainable growth.",
    imageUrl: "/coaches/priya.jpg",
    expertise: ["Financial Analysis", "Growth Strategy", "Patient Retention"],
    rating: 4.9,
    totalSessions: 310
  },
  {
    id: 6,
    name: "Dr. Matthew Lee",
    specialty: "Front Office Excellence",
    bio: "Focuses on integrating technology into the front office to streamline patient scheduling and billing.",
    imageUrl: "/coaches/matthew.jpg",
    expertise: ["Tech Integration", "EHR Optimization", "Online Booking"],
    rating: 4.5,
    totalSessions: 98
  },
  {
    id: 7,
    name: "Dr. Emily Rodgers",
    specialty: "Practice Management",
    bio: "Specializes in team leadership and building a positive culture that retains top talent.",
    imageUrl: "/coaches/emily.jpg",
    expertise: ["Leadership", "Culture Building", "Staff Training"],
    rating: 4.8,
    totalSessions: 275
  },
  {
    id: 8,
    name: "Dr. Carlos Navarro",
    specialty: "Practice Management",
    bio: "Expert in creating patient-centric workflows that boost satisfaction and drive word-of-mouth referrals.",
    imageUrl: "/coaches/carlos.jpg",
    expertise: ["Patient Experience", "Workflow Efficiency", "Referral Strategies"],
    rating: 4.7,
    totalSessions: 187
  },
  {
    id: 9,
    name: "Dr. Olivia Brooks",
    specialty: "Front Office Excellence",
    bio: "Passionate about customer service best practices and front-desk communication protocols.",
    imageUrl: "/coaches/olivia.jpg",
    expertise: ["Customer Service", "Front-Desk Protocol", "Conflict Resolution"],
    rating: 4.6,
    totalSessions: 120
  }
];

export default function CoachesDirectory() {
    const [searchTerm, setSearchTerm] = useState("");
    const [selectedSpecialty, setSelectedSpecialty] = useState("");
  
    const filteredCoaches = coaches.filter((coach) => {
      const matchesSearch =
        coach.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        coach.specialty.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesSpecialty = !selectedSpecialty || coach.specialty === selectedSpecialty;
      return matchesSearch && matchesSpecialty;
    });
  
    const BookingDialog = ({ coach }: { coach: Coach }) => (
      <Dialog>
        <DialogTrigger asChild>
          <Button>Schedule Coaching</Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Schedule with {coach.name}</DialogTitle>
            <DialogDescription>
              Choose a time that works best for your coaching session.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select time slot" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="slot1">Tomorrow 10:00 AM</SelectItem>
                  <SelectItem value="slot2">Tomorrow 2:00 PM</SelectItem>
                  <SelectItem value="slot3">Friday 11:00 AM</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <Button onClick={() => alert("Booking confirmed! (Demo)")}>
              Confirm Booking
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  
    return (
      <div className="min-h-screen bg-gray-50 pt-20">
        <div className="container mx-auto px-4 py-8">
          {/* Search and Filter Section */}
          <div className="mb-8 space-y-4">
            <h1 className="text-3xl font-bold">Find Your Perfect Coach</h1>
            <div className="flex flex-col sm:flex-row gap-4">
              <Input
                placeholder="Search coaches..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="max-w-sm"
              />
              <Select onValueChange={setSelectedSpecialty}>
                <SelectTrigger className="max-w-[200px]">
                  <SelectValue placeholder="Specialty" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Specialties</SelectItem>
                  <SelectItem value="Practice Management">Practice Management</SelectItem>
                  <SelectItem value="Front Office Excellence">Front Office Excellence</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
  
          {/* Coaches Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredCoaches.map((coach) => (
              <Link href="/coaches/dr-sarah-johnson" key={coach.id} className="block">
                <Card className="overflow-hidden hover:shadow-lg transition-shadow">
                  <CardHeader className="flex flex-row items-center gap-4">
                    <Avatar className="h-12 w-12">
                      <AvatarImage src={coach.imageUrl} alt={coach.name} />
                      <AvatarFallback>
                        {coach.name
                          .split(" ")
                          .map((n) => n[0])
                          .join("")}
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <CardTitle className="text-xl">{coach.name}</CardTitle>
                      <CardDescription>{coach.specialty}</CardDescription>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-gray-600 mb-4">{coach.bio}</p>
                    <div className="flex flex-wrap gap-2 mb-4">
                      {coach.expertise.map((skill) => (
                        <span
                          key={skill}
                          className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full"
                        >
                          {skill}
                        </span>
                      ))}
                    </div>
                    <div className="flex items-center justify-between mb-4">
                      <span className="text-sm text-gray-600">‚≠ê {coach.rating}</span>
                      <span className="text-sm text-gray-600">{coach.totalSessions} sessions</span>
                    </div>
                    <BookingDialog coach={coach} />
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </div>
      </div>
    );
  }

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import { ClerkProvider } from "@clerk/nextjs";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body className={inter.className}>{children}</body>
      </html>
    </ClerkProvider>
  );
}

================
File: app/page.tsx
================
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { NavigationMenu, NavigationMenuItem, NavigationMenuLink, NavigationMenuList } from "@/components/ui/navigation-menu";
import { SignInButton, SignUpButton, UserButton } from "@clerk/nextjs";
import { auth } from "@clerk/nextjs/server";

export default async function Home() {
  const { userId } = await auth();

  return (
    <div className="min-h-screen bg-white">
      {/* Navbar */}
      <nav className="fixed top-0 w-full border-b bg-white/75 backdrop-blur-lg">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex h-16 items-center justify-between">
            {/* Logo & Company Name */}
            <div className="flex items-center">
              <span className="text-xl font-bold text-blue-600">DCC</span>
            </div>

            {/* Navigation Links */}
            <NavigationMenu>
              <NavigationMenuList className="hidden md:flex space-x-8">
                <NavigationMenuItem>
                  <NavigationMenuLink className="text-sm font-medium text-gray-700 hover:text-blue-600" href="#features">
                    Features
                  </NavigationMenuLink>
                </NavigationMenuItem>
                <NavigationMenuItem>
                  <NavigationMenuLink className="text-sm font-medium text-gray-700 hover:text-blue-600" href="#coaches">
                    Coaches
                  </NavigationMenuLink>
                </NavigationMenuItem>
                <NavigationMenuItem>
                  <NavigationMenuLink className="text-sm font-medium text-gray-700 hover:text-blue-600" href="#pricing">
                    Pricing
                  </NavigationMenuLink>
                </NavigationMenuItem>
              </NavigationMenuList>
            </NavigationMenu>

            {/* Auth Buttons */}
            <div className="flex items-center gap-4">
              {!userId ? (
                <>
                  <SignInButton mode="modal">
                    <Button variant="ghost" size="sm">
                      Sign in
                    </Button>
                  </SignInButton>
                  <SignUpButton mode="modal">
                    <Button size="sm">
                      Get Started
                    </Button>
                  </SignUpButton>
                </>
              ) : (
                <UserButton afterSignOutUrl="/" />
              )}
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="pt-24 pb-16 sm:pt-32 sm:pb-24">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl">
              Dental Coaching Collective
            </h1>
            <p className="mt-6 text-lg leading-8 text-gray-600">
              Empowering dental practices with expert coaching and AI-powered learning
            </p>
            <div className="mt-10 flex items-center justify-center gap-x-6">
              <SignUpButton mode="modal">
                <Button size="lg">
                  Start your journey
                </Button>
              </SignUpButton>
              <Button variant="outline" size="lg">
                Learn more
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-16 bg-gray-50">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            <Card>
              <CardHeader>
                <CardTitle>Live Coaching</CardTitle>
                <CardDescription>Connect with expert dental coaches in personalized 1-on-1 sessions</CardDescription>
              </CardHeader>
              <CardContent>
                <ul className="list-disc list-inside space-y-2 text-sm text-gray-600">
                  <li>Personalized guidance</li>
                  <li>Flexible scheduling</li>
                  <li>Expert feedback</li>
                </ul>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>AI Auto-Coaching</CardTitle>
                <CardDescription>24/7 access to AI-powered coaching and insights</CardDescription>
              </CardHeader>
              <CardContent>
                <ul className="list-disc list-inside space-y-2 text-sm text-gray-600">
                  <li>Instant answers</li>
                  <li>Practice scenarios</li>
                  <li>Continuous learning</li>
                </ul>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Resource Library</CardTitle>
                <CardDescription>Comprehensive collection of dental practice resources</CardDescription>
              </CardHeader>
              <CardContent>
                <ul className="list-disc list-inside space-y-2 text-sm text-gray-600">
                  <li>Templates & guides</li>
                  <li>Best practices</li>
                  <li>Training materials</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-bold tracking-tight text-gray-900">
            Ready to transform your dental practice?
          </h2>
          <p className="mt-4 text-lg text-gray-600">
            Join dental professionals who are already benefiting from our platform.
          </p>
          <div className="mt-8">
            <SignUpButton mode="modal">
              <Button size="lg">
                Get started today
              </Button>
            </SignUpButton>
          </div>
        </div>
      </section>
    </div>
  );
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: prisma/schema.prisma
================
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Coach {
  id           String   @id @default(cuid())
  name         String
  specialty    String
  bio          String
  imageUrl     String?
  availability String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Booking {
  id        String   @id @default(cuid())
  coachId   String
  userId    String
  dateTime  DateTime
  status    String
  createdAt DateTime @default(now())
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: types/index.ts
================
export interface Coach {
    id: number;
    name: string;
    specialty: string;
    bio: string;
    imageUrl: string;
    expertise: string[];
    rating: number;
    totalSessions: number;
    about?: string;
    approach?: string;
    availability?: string[];
    testimonials?: {
      text: string;
      author: string;
      role: string;
    }[];
  }

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: Dental-Coaching-Collective-TXT.txt
================
Dental Coaching Collective (DCC): Comprehensive Proposal
The Dental Coaching Collective (DCC) is a unified platform designed to support dental professionals in managing and growing their practices. The platform comprises two integrated components: Live Coaching and AI Auto-Coaching with a Resource Library, delivered through a secure, paywalled system. A future standalone project, the AI Dental Receptionist, is also outlined.

1. Dental Coaching Collective (DCC)
A. Live Coaching
Live Coaching connects users with experienced dental coaches for personalized, one-on-one virtual sessions. This feature operates outside the paywall, allowing users to browse coaches and book sessions without logging in. Payment is required at checkout, but subscriptions offering discounted session packages may include coupon codes that make individual bookings "free" within the subscription framework.
Key Features:
* Coach Profiles:
o Coaches have detailed profiles with bios, areas of expertise, ratings (optional), and availability.
o Users can search profiles by specialty, location, or session type.
* Session Booking and Payment Options:
o Pay-per-Session: One-time purchases at standard rates.
o Subscription Packages: Discounted session bundles with monthly credits or coupon codes applied at checkout.
* Scheduling Integration:
o Calendar synchronization with Google Calendar or similar tools to ensure real-time availability.
* AI-Powered Notetaking:
o AI joins sessions as a notetaker to:
* Transcribe the conversation.
* Summarize action points and coaching recommendations.
* Feed anonymized insights back into the AI knowledge base for broader learning.
Workflow:
1. Users browse the public list of coaches, filtering by expertise or availability.
2. A user books a session as a one-time purchase or using subscription credits.
3. The system confirms the booking and sends meeting details to both parties.
4. An AI notetaker joins the session to transcribe and summarize discussions.
5. Post-session, users and coaches receive a follow-up email with session notes.
Proposed Tools:
* Scheduling: Acuity, TidyCal, or a custom-built scheduler.
* Video Conferencing: Google Meet or Zoom API integration.
* Payment Processing: Stripe for secure transactions.
* AI Transcription: Otter.ai, Whisper (OpenAI), or Fireflies.ai.

B. AI Auto-Coaching and Resource Library
The AI Auto-Coaching system and Resource Library operate behind the paywall, providing users with access to on-demand coaching and a curated database of materials.
Key Features:
1. AI Knowledge Base:
o Powered by proprietary resources, including:
* Books, YouTube videos, and instructional sites like Front Office Rocks, Front Office Academy, and Dentalflix.
* Hundreds of practice-specific documents scrubbed of identifying details.
* Transcripts and anonymized insights from live coaching sessions.
o Knowledge is processed and structured for retrieval, with all source attribution removed to ensure privacy.
2. Retrieval-Augmented Generation (RAG):
o AI ensures precise, context-specific answers by retrieving relevant data before generating responses.
3. Dynamic Resource Search:
o Users can search for materials like templates, checklists, or guides.
o AI suggests additional materials based on user queries and behavior.
4. Personalized Learning Paths:
o AI proactively guides users through courses tailored to their needs.
o Delivery formats are personalized based on user preferences:
* Text Chat for text-based learners.
* Audio Responses via Eleven Labs for conversational learners.
* Avatar-Led Video Lessons via tools like HeyGen for visual learners.
o Quizzes, assignments, and certifications are included for progress tracking.
Workflow:
1. Users log in to access the AI assistant and Resource Library.
2. They ask the AI questions or browse resources directly.
3. The AI delivers relevant answers and recommends resources or courses based on the user's role and preferences.
4. Users progress through guided learning paths, completing modules and earning certifications.
Proposed Tools:
* AI Platform: OpenAI GPT with a RAG model.
* Database: Vector database solutions like Pinecone or Weaviate.
* CMS: WordPress (with LMS plugins) or a custom-built CMS.
* Interactive Media: Canva for editable templates, Eleven Labs for audio, and HeyGen for avatar videos.

2. AI Dental Receptionist
The AI Dental Receptionist is a separate project designed to automate front-office tasks such as scheduling, patient communication, and inquiry management. It operates as a standalone platform with potential collaboration opportunities for cross-service discounts with the DCC.
Key Features:
* Call Handling:
o AI answers incoming calls, gathers information, and schedules appointments.
o Natural Language Processing (NLP) identifies user intent and sentiment.
* Appointment Scheduling:
o Direct integration with dental practice management systems (e.g., Dentrix, Open Dental).
* Multi-Channel Communication:
o Manages inquiries across phone, text, email, and social media.
* Escalation Protocols:
o Transfers complex queries to human staff seamlessly.
* HIPAA Compliance:
o Ensures patient data security and legal compliance in all interactions.
Workflow:
1. Patients call or message the practice; the AI receptionist handles initial inquiries.
2. Routine requests (e.g., appointment scheduling) are completed autonomously.
3. Complex or sensitive issues are flagged for manual follow-up by human staff.
4. Interaction data is logged into the practice management system.
Proposed Tools:
* Voice AI: Eleven Labs for natural language voice interactions.
* Communication APIs: Twilio for multi-channel support.
* Practice Management Integration: APIs for Dentrix, Open Dental, or similar platforms.

Phased Development Approach
1. Phase 1 (MVP):
o Launch the DCC platform with:
* Live Coaching (front of paywall).
* AI Auto-Coaching and Resource Library (behind paywall).
o Include basic dynamic resource suggestions and foundational AI capabilities.
2. Phase 2:
o Expand AI personalization with conversational audio and avatar-led videos.
o Add learning progress tracking, certifications, and admin analytics.
3. Phase 3:
o Develop and launch the AI Dental Receptionist as a standalone system.



Key Questions for Developers
1. How would you structure the AI knowledge base to integrate and anonymize diverse data types (books, transcripts, videos)?
2. What is the best approach for delivering personalized learning paths with multiple formats (chat, audio, video)?
3. Should scheduling functionality leverage third-party tools (e.g., Acuity) or a custom-built system for scalability?
4. How would you ensure HIPAA compliance for the AI Dental Receptionist?
5. What tools would you use to automate updates to the AI knowledge base with new materials?
Project Ownership and Usability
1. Ownership of Code and Content:
o Will I have full ownership of the codebase, AI models, and all data (including the knowledge base) once the project is complete?
o How will you structure the handoff process to ensure I have everything needed to maintain and edit the platform without dependency on your team?
2. Ease of Use for Updates:
o Can you design the backend/admin interface to be entirely no-code or low-code for updating resources, managing users, and editing site features?
o What tools or CMS platforms do you recommend to ensure I can upload new resources, adjust AI training materials, or modify coaching profiles without developer intervention?
o Can you provide training or a user guide for managing the platform after it's delivered?
3. Future Customizations:
o If I want to add new features (e.g., AI avatars or advanced analytics), how easy will it be for me or another developer to build upon your work?
o Will you provide documentation for the platform architecture to facilitate future changes?

Technical Development and Scalability
4. Scalability of AI Systems:
o How will the AI system handle an increasing number of users and queries as the platform grows?
o Are there any capacity limitations (e.g., database size, query volume)?
o What steps will you take to optimize the platform for future scalability without requiring a complete rebuild?
5. AI Knowledge Base Integration:
o How will data be cleaned and anonymized before adding it to the knowledge base? Can this process be automated for new materials?
o Will the AI system support multiple content formats (e.g., PDFs, videos, interactive documents) out of the box, or will additional customization be required?
o How will flagged unanswered questions or gaps in the knowledge base be tracked and addressed?
6. Subscription Management:
o How will subscription plans (e.g., pay-per-session, monthly packages) be managed on the backend?
o Can coupon codes and discounts be created and applied easily without developer assistance?
7. User Authentication and Security:
o How will user accounts be secured? Will you implement multi-factor authentication or similar measures?
o Will the platform comply with all relevant data privacy laws (e.g., GDPR, HIPAA)?
8. Maintenance and Bug Fixes:
o What is your process for resolving bugs post-launch? Do you offer ongoing maintenance packages or support plans?
o Will updates to dependencies (e.g., CMS plugins, APIs) be included in maintenance, and how will I be notified of critical updates?

Cost and Support Structure
9. Project Creation Costs:
o What are the estimated costs for the complete project, broken down by feature (e.g., AI system, resource library, scheduling tool)?
o Are there any upfront fees for third-party tools or licenses (e.g., OpenAI GPT, Eleven Labs, Twilio)?
10. Ongoing Support Costs:
o Do you offer a monthly subscription plan for maintenance and updates? If so, what is included?
o If support is provided on a per-hour basis, what is your rate, and is there a minimum billing increment (e.g., 1-hour blocks)?
11. Fixed Costs:
o What are the fixed costs associated with hosting, server management, and third-party integrations (e.g., payment gateways, AI platforms)?
o Will these fixed costs increase as the platform scales, or can they remain stable?
12. Variable Costs:
o Are there variable costs per user or per query for AI interactions? If so, what is the estimated cost per interaction or user per month?
o How can I track and manage variable costs to ensure they align with revenue?

Handoff and Long-Term Ownership
13. Post-Project Handoff:
o What deliverables will be provided at project completion (e.g., code repository, AI training data, admin guide)?
o Will you include a testing phase and approval process before the final handoff?
14. Hosting and Platform Management:
o Who will manage hosting? Can this be transitioned to my ownership with access to all necessary credentials?
o Are there specific hosting platforms or services you recommend to optimize cost and performance?
15. Training and Documentation:
o Will you provide training for me and my team on how to manage the platform?
o Can you create a detailed operations manual or video tutorials for the admin dashboard?

AI Personalization and Advanced Features
16. Learning Path Customization:
o How will the AI determine user preferences for learning formats (e.g., text, audio, video)?
o Will the platform support multi-format delivery (e.g., Eleven Labs for audio, HeyGen for video) from day one, or will these features need to be phased in?
17. AI Coaching Interaction:
o Will the AI system be conversational (e.g., multi-turn interactions), and how will it handle complex or multi-step queries?
o Can users save or bookmark answers, resources, or courses for future reference?
18. Advanced Analytics:
o Will the platform include analytics for tracking user engagement, resource usage, or AI query trends?
o How can I access and export these analytics to make data-driven decisions?

AI Dental Receptionist-Specific Questions
19. Voice AI Development:
o How will you integrate AI voice systems like Eleven Labs? Will it handle natural conversations with patients?
o Can the AI receptionist detect and escalate emotional cues (e.g., upset or dissatisfied callers)?
20. Practice Management Integration:
o How seamless will the integration with practice management software (e.g., Dentrix, Open Dental) be? Are there existing APIs or custom development required?
o Can the receptionist handle updates like cancellations, rescheduling, and follow-ups without manual intervention?
21. HIPAA and Data Security:
o What steps will you take to ensure HIPAA compliance for patient data handled by the AI receptionist?
o How will sensitive data (e.g., medical records or billing information) be protected in multi-channel communication?

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: middleware.ts
================
import { clerkMiddleware } from "@clerk/nextjs/server";

export default clerkMiddleware();

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
};

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "dental-coaching-collective",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.9.6",
    "@prisma/client": "^6.1.0",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-navigation-menu": "^1.2.3",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-slot": "^1.1.1",
    "@supabase/supabase-js": "^2.47.10",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.469.0",
    "next": "15.1.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "repomix": "^0.2.10",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.3",
    "postcss": "^8",
    "prisma": "^6.1.0",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
# DCC MVP Architecture Overview

High-level architecture of the **Dental Coaching Collective (DCC)** MVP. The MVP includes:

1. **Live Coaching (Front of Paywall)**
2. **AI Auto-Coaching & Resource Library (Behind Paywall)**
3. **Mocked Payment Flow (Stripe)**
4. **AI Chatbot (Hardcoded Retrieval)**
5. **Optional Future Integrations** (e.g., Google Meet API for live sessions, Notta AI for transcripts)

---

## Tech Stack

- **Next.js**:  
  - Front-end framework (React-based)  
  - Deployed on [Vercel](https://vercel.com/) for rapid continuous deployment
  
- **Supabase**:  
  - Database (PostgreSQL)  
  - Authentication for user sign-up/login  
  - Real-time APIs and easy integration with Next.js
  
- **Prisma**:  
  - ORM layer, type-safe queries, and schema migrations

- **Stripe (Mocked for MVP)**:  
  - Payment and subscription management  
  - In the MVP, display a mock checkout flow to illustrate feasibility

- **GPT-4o-mini (Mocked RAG)**:  
  - AI model for chatbot responses (can substitute GPT-3.5 or GPT-4 as needed)  
  - Hardcoded transcripts or Q&A pairs to emulate retrieval

- **Notta AI** (optional for demo data):  
  - Generate transcripts from meetings or videos that can be used in the Resource Library

- **Google Meet API** (future):  
  - Potential integration for live video sessions and scheduling

---

## System Architecture

Below is a high-level diagram showing how each component of the MVP connects:

```mermaid
graph LR
    A[User] --> |1. Visit Site| B[Next.js on Vercel]
    B --> |2. Auth Requests| C[Supabase Auth]
    B --> |3. DB Queries via Prisma| D[(Supabase DB)]
    B --> |4. Payment Actions Mock| E[Stripe Mocked]
    B --> |5. AI Queries| F[GPT-4o-mini]
    B --> |6. Resource Data| D
    B --> |7. Potential Video| G[Google Meet API]
    B --> |Optional Transcripts| H[Notta AI]

    style B fill:#286DA8,stroke:#fff,stroke-width:2px
    style C fill:#42BFDD,stroke:#fff,stroke-width:2px
    style D fill:#BADA55,stroke:#fff,stroke-width:2px
    style E fill:#7B7B7B,stroke:#fff,stroke-width:2px
    style F fill:#F47174,stroke:#fff,stroke-width:2px
    style G fill:#C892FF,stroke:#fff,stroke-width:2px
    style H fill:#FCD34D,stroke:#fff,stroke-width:2px
```

## User Flow

```mermaid
graph TD
    A[Visitor] --> B[Landing Page]
    B --> C[Coach Directory]
    C --> D[Book Session Mock]
    D --> X[Confirmation Screen]

    B --> E[Login/Sign-up]
    E --> F[Paywall Check]
    F --> G{Subscription Status?}
    G --> |YES| H[Resource Library & AI Chat]
    G --> |NO| I[Upgrade Prompt]

    H --> J[Chat with GPT-4o-mini]
    J --> K[AI Response Hardcoded RAG]

    style B fill:#dfe3e6,stroke:#000,stroke-width:1px
    style F fill:#ffc107,stroke:#000,stroke-width:1px
    style H fill:#8bc34a,stroke:#000,stroke-width:1px
    style J fill:#e1f7d5,stroke:#000,stroke-width:1px
```

## Flow Description

1. **Landing Page**: Public marketing page with overview of DCC
2. **Coach Directory**: Public page listing available coaches (front-of-paywall)
3. **Mock Booking**: User selects a time; payment is mocked for the MVP
4. **Login/Sign-up**: Required to access premium (AI & Resources)
5. **Paywall Check**: System checks subscriptionStatus in Supabase
6. **If Subscribed**: Access the Resource Library and AI Chat
7. **If Not Subscribed**: Prompt user to "Upgrade" (mock Stripe flow)
8. **AI Chat**: GPT-4o-mini (or GPT-3.5/4) returns answers referencing hardcoded transcripts or docs

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
